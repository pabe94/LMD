/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 22.04.0 ] */
/* [wxMaxima: title   start ]
Práctica 6. Lógica de Proposiciones.
   [wxMaxima: title   end   ] */


/* [wxMaxima: comment start ]
Desde el menú Archivo --> Cargar paquete, cargamos los paquetes logic_ops.mac y logica.mac, que nos permiten
trabajar con proposiciones lógicas. Es importante que carguemos los paquetes en este orden para no obtener 
mensajes de error.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
/*load("/home/esperanza/Escritorio/P6/logic.lisp")$*/;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
/*load("/home/esperanza/Escritorio/P6/logic_ops.mac")$*/
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
/*load("/home/esperanza/Escritorio/P6/logic.mac")$*/
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
file_search(logic);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
load(%);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: caption start ]
/home/esperanza/Escritorio/P6/table.png
   [wxMaxima: caption end   ] */
/* [wxMaxima: image   start ]
png

   [wxMaxima: image   end   ] */

/* [wxMaxima: comment start ]
Los operadores reconocidos por Maxima son los mostrados en la tabla de arriba.

La primera columna nos indica el comando del operador lógico y la segunda la forma en que éste 
se escribe. Un operador de tipo prefijo significa que se escribe delante de los operandos, 
mientras que uno de tipo infijo se escribe entre los operandos a los que se aplica. 
La etiqueta n-ario significa que el operador se puede aplicar a más de un operando, escribiéndolo 
de forma infija. La tercera columna nos informa de la precedencia del operador, esto es, ordena la
actuación de los operadores lógicos en una proposición (regla de prioridad). Los operadores con 
mayor precedencia se evalúan antes y, en caso de empate, se consideran de izquierda a derecha. 
La última columna indica el nombre y los símbolos con los que cada operador se suele representar.
   [wxMaxima: comment end   ] */


/* [wxMaxima: section start ]
Tablas de verdad.
   [wxMaxima: section end   ] */


/* [wxMaxima: comment start ]
A lo largo de esta práctica usaremos las letras P, Q, R... para denotar variables 
proposicionales, es decir, fórmulas atómicas. Algunos ejemplos de proposiciones lógicas 
escritas con la sintaxis que acabamos de definir son:

true, false, not P, P or Q, P implies (Q and R), P nand Q, (P eq Q) eq R

donde true denota una proposición tautológica y false una proposición contradictoria 
o contradicción.

El valor de verdad de una proposición se representa también mediante true y false.
Esto no crea ningún conflicto con lo anterior, pues en cualquier aparición de true o false, 
el contexto nos informará si se trata de una proposición o de un valor de verdad.

Comenzamos estudiando el comando characteristic_vector(prop) que nos proporciona la tabla
de verdad de la proposición prop. Probemos los siguientes ejemplos:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
characteristic_vector(P implies Q);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
characteristic_vector(P implies (Q implies P));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Como podemos ver, éste último nos informa de que toda proposición de la forma P -> (Q -> P) es 
una tautología.
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
Como sabemos, el operador lógico or (v) verifica la propiedad asociativa y por tanto 
no requiere el uso de paréntesis. Podemos comprobarlo como sigue:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
characteristic_vector((P or Q) or R);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
characteristic_vector(P or (Q or R));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
characteristic_vector(P or Q or R);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
El operador xor (⊕) es también un operador asociativo.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
characteristic_vector(P xor (Q xor R));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
characteristic_vector((P xor Q) xor R);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Sin embargo, implies (-->) no verifica la propiedad asociativa.:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
X:characteristic_vector(P implies (Q implies R));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
Y:characteristic_vector((P implies Q) implies R);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
is(X=Y);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
Z:characteristic_vector(P implies Q implies R);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
is(Y=Z);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Como vemos, escribir P implies Q implies R es equivalente a escribir (P implies Q) implies R. Tal y 
como advertíamos antes, en caso de empate entre operadores, se asigna más prioridad de izquierda a derecha.

Hemos visto que el comando characteristic_vector calcula la tabla de verdad de una proposición
lógica a partir de las variables proposicionales con las que se construye dicha proposición.

Este comando admite también el siguiente formato:

characteristic_vector(prop, [var_1, ..., var_n])

que nos proporciona la tabla de verdad de la proposición prop respecto a las variables 
var_1,...,var_n que le indiquemos. Por defecto, en caso de omision de las variables, se considera
el orden de aparición de las mismas. Por ejemplo, es indiferente escribir cualquiera de los 
dos comandos siguientes:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
characteristic_vector(P implies Q);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
characteristic_vector(P implies Q,[P,Q]);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Notemos que el orden de las variables influye en la construcción de la tabla de verdad de la proposición 
correspondiente.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
characteristic_vector(P implies Q,[Q,P]);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
characteristic_vector(P implies Q,[P]);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
En este último ejemplo hemos construído la tabla de verdad de la fórmula P implies Q sólo respecto
a la variable P. Dado que dicha fórmula también depende de Q, los valores de la tabla de verdad resultantes 
se expresan en función de Q.

Ahora ya entenderá la salidas devueltas por los comandos siguientes.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
characteristic_vector(P implies Q,[R]);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
characteristic_vector(true);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
characteristic_vector(true,[P]);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
characteristic_vector(true,[P,Q]);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Definición: equivalencia lógica.
--------------------------------

Dos proposiciones lógicas α y β pertenecientes a un lenguaje de proposiciones L, se dice que son
equivalentes si para cualquier interpretación I sobre L se verifica que I(α) = I(β). 
Dicho de otro modo, α y β son equivalentes si la proposición α ↔ β es una tautología.
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
Ejercicio 1. Con lo visto hasta ahora, ¿cómo podría comprobarse que dos proposiciones lógicas
son o no equivalentes?
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
El comando logic_equiv(expr_1,expr_2) devuelve true si las proposiciones representadas por
expr_1 y expr_2 son equivalentes, y false en caso contrario.

Claramente, la proposición representada por expr es una tautología si y sólo si logic_equiv(expr, true)
devuelve true, y es una contradicción si y sólo si logic_equiv(expr, false) devuelve true.

Pruebe con las siguientes instrucciones.
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
Ejercicio 2. Usando el comando logic_equiv, ¿cómo podemos conocer si una proposición dada es 

(1) una tautología?

(2) una contradicción?
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
logic_equiv(P implies Q, not P or Q);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Ejercicio 3. 

Para cada una de las proposiciones siguientes, determinar si es tautología, satisfacible, refutable o
contradicción.

1. ¬(P ∧¬Q∧R) → (R → (P → Q))

2. (P ∨Q) → (P ∧Q)

3. (Q∨¬R) → (P → P )

4. (P ∧Q)∧¬(¬P → Q)

5. P ↔ (Q ↔ (P ↔ Q))

6. (P → (Q∨R))∨(P → (Q∧R))

7. (P → Q) → ((Q → R) → (P → R))

8. ¬((P → Q)∨(P → (¬Q)))
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
Definición: consecuencia lógica.
--------------------------------

Dadas las proposiciones α1 , α2 , . . . , αn , β, se verifica que el conjunto 
Ω = {α1 , α2 , . . . , αn } implica semánticamente a β si y sólo si el conjunto 
{α1 , α2 , . . . , αn , ¬β} es insatisfacible. También se dice que β es consecuencia 
lógica de Ω y se denota por Ω |= β . Esto a su vez equivale a que la proposición
α1 ∧ α2 ∧ · · · ∧ αn ∧ ¬β sea una contradicción.
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
Ejercicio 4.

Dado el conjunto de proposiciones Ω = {P → (Q∧R), Q → S, P ∧T },
determine cuáles de las proposiciones siguientes son consecuencia lógica de Ω.

1. β = S.

2. β = ¬T ∧R.

3. β = ¬S → (¬P ∨T ).

4. β = ¬T ∨Q.

5. β = S ↔ Q.

6. β = ¬Q∧S .

7. β = S → Q.

8. β = S∨¬R.
   [wxMaxima: comment end   ] */


/* [wxMaxima: section start ]
Expresiones equivalentes.
   [wxMaxima: section end   ] */


/* [wxMaxima: comment start ]
Los siguientes comandos transforman proposiciones en otras equivalentes.
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
Polinomio de Gegalkine.
-----------------------

Sabemos que toda función booleana f se representa de modo único como un polinomio involucrando sólo a 
los operadores xor (⊕) y and (∧, también denotado por un punto) así como a la constante lógica 1 (que
estamos representando por true). Éste es el llamado polinomio de Gegalkine de f. Esta
misma idea también es aplicable a las proposiciones lógicas.

El comando zhegalkin_form(expr) calcula el polinomio de Gegalkine de la proposición representada
por expr.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
zhegalkin_form(not P);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
zhegalkin_form(P implies Q);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
zhegalkin_form(P and Q);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
zhegalkin_form(P or Q);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
zhegalkin_form(P eq Q);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
zhegalkin_form(P eq Q);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Por supuesto, si la proposición dada es ya su propio polinomio de Gegalkine, la salida es
naturalmente dicha proposición. Es lo que ocurre en los siguientes casos.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
zhegalkin_form(true);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
zhegalkin_form(P and Q);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
zhegalkin_form(P xor Q);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
zhegalkin_form((P and Q) xor true);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
zhegalkin_form((P and Q and R) xor P xor (Q and R));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
(Conviene recordar que el operador and tiene más prioridad que xor.)

El comando boolean_form(expr) escribe la proposición expr sólo en función de los 
operadores not, or y and. La única excepción se produce cuando expr es true o false. 
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
boolean_form(P implies Q);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
boolean_form(P eq Q);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
boolean_form((P implies Q) implies R);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
boolean_form(((P implies Q) implies R) implies S);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
boolean_form(true);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Como se puede observar en las respuestas obtenidas, no se intenta simplificar más nada.

El comando demorgan(expr) aplica las leyes de De Morgan a expr.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
demorgan(not (P or Q));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
demorgan(not (P and Q));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
demorgan(not (P and Q and R));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
demorgan(not not P);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Este comando hay que usarlo tras haber aplicado boolean_form, pues de lo contrario no transforma
la expresión, como sucede en los siguientes ejemplos.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
demorgan(P implies Q);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
demorgan(boolean_form(P implies Q));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
demorgan(P implies Q implies R);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
demorgan(boolean_form((P implies Q) implies R));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
demorgan(P implies Q implies R and not(S));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
demorgan(boolean_form(P implies Q implies R and not(S)));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
El comando logic_simp(expr) devuelve una versión simplificada equivalente a expr.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
logic_simp(not not not P);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
logic_simp(P or (Q or false or (P or Q)));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
logic_simp(P xor true xor Q xor true);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
logic_simp(boolean_form(((P implies Q) implies R) implies S));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
logic_simp(boolean_form(((P implies Q) implies R) implies S));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Como pone de manifiesto la última respuesta obtenida, la salida de este comando puede dejar
mucho que desear.
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
Forma normal conjuntiva y forma normal disyuntiva.
--------------------------------------------------

Imitando lo que ocurre con las funciones booleanas, toda proposición lógica se puede expresar 
usando los operadores lógicos ¬, ∧, ∨. De este modo obtenemos la forma normal conjuntiva y la 
forma normal disyuntiva de una proposición lógica. En Maxima, éstas se obtienen con los comandos 
pcnf y pdnf, respectivamente.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
pcnf(not P);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
pdnf(not P);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
pcnf(P and Q);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
pdnf(P and Q);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
pcnf(P or Q);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
pdnf(P or Q);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
pcnf(P implies Q);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
pdnf(P implies Q);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
pcnf(P eq Q);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
pdnf(P eq Q);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
pcnf(P nor Q);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
pdnf(P nor Q);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
pcnf(P nand Q);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
pcnf(P nand Q);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
pdnf(P nand Q);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
pcnf(P xor Q);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
pdnf(P xor Q);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
pcnf(((P implies Q) implies R) implies S);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
pdnf(((P implies Q) implies R) implies S);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Definición: conjunto de operadores funcionalmente completo.
-----------------------------------------------------------

Un conjunto de operadores lógicos ∆ se dice funcionalmente completo si cualquier 
operador lógico se puede expresar en términos de los operadores pertenecientes a ∆.

El comando functionally_complete(expr_1,...,expr_n) devuelve true sii {expr_1,...,expr_n}
define un sistema funcionalmente completo.
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
Por ejemplo, sabemos que el conjunto {¬, ∨, ∧} es funcionalmente completo. Comprobémoslo:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
functionally_complete(P and Q, P or Q, not P);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
También sabemos que toda proposición lógica α se expresa en términos de los operadores true, and, xor, 
resultando el polinomio de Gegalkine de α.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
functionally_complete(P and Q, P xor Q, true);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Nótese que si suprimimos la constante true en el conjunto antorior, ya no tenemos un conjunto funcionalmente 
completo.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
functionally_complete(P and Q, P xor Q);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Los conjuntos {nor} y {nand} también son funcionalmente completos.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
functionally_complete(P nor Q);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
functionally_complete(P nand Q);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Por supuesto, si a un conjunto funcionalmente completo le añadimos un nuevo operador, 
resulta otro conjunto funcionalmente completo.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
functionally_complete(P nor Q, P implies Q);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Definción: base lógica.
-----------------------

Un conjunto de operadores ∆ se llama una base lógica si ∆ es funcionalmente completo y al
suprimir cualquier operador en ∆, el conjunto resultante ya no es funcionalmente completo. 
También se dice que ∆ es un conjunto funcionalmente completo minimal.

Podemos comprobar que un conjunto de operadores ∆ es una base lógica de manera 'artesanal' usando
el comando functionally_complete. Para ello, hemos de comprobar que ningún subconjunto propio de ∆ 
es funcionalmente completo.
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
Ejercicio 5.

Comprobar aplicando la idea expuesta en el párrafo anterior que el conjunto de operadores 
{and, xor, true} es funcionalmente completo.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
functionally_complete(P and Q, P xor Q, true);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
functionally_complete(P and Q, P xor Q);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
functionally_complete(P and Q, true);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
functionally_complete(P xor Q, true);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Otra posibilidad consiste en utilizar el comando logic_basis(expr_1,...,expr_n) que devuelve
true sii {expr_1,...,expr_n} es una base lógica. 
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
logic_basis(P and Q, P xor Q, true);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
logic_basis(P and Q, P or Q);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
logic_basis(P and Q, P or Q, not P);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
logic_basis(P and Q, not P);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
logic_basis(P or Q, not P);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
logic_basis(P and Q, P xor Q, true);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Ejercicio 6. 

Justificar que el conjunto de operadores {¬, →} es una base lógica: primero teóricamente y, a
continuación, haciendo uso de Maxima.
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
Ejercicio 7.

Representar cada una de las proposiciones siguientes en función de los operadores del conjunto
{¬, →} y comprobar en cada caso que la expresión obtenida es equivalente a la inicial.

a) P ∧ Q

b) P ∧ Q ∧ R

c) P ∨ Q

d) P ∨ Q ∨ R

e) P ↔ Q
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
Ejercicio 8. 

Encontrar una proposición lógica que se represente de dos formas distintas en función de los operadores ¬ y →.
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
Ejercicio 9. 

Si α es una proposición lógica que es una contradicción, justificar que toda proposición lógica se
puede expresar usando el operador lógico → y α. A continuación compruebar esto mismo utilizando Maxima.
   [wxMaxima: comment end   ] */



/* Old versions of Maxima abort on loading files that end in a comment. */
"Created with wxMaxima 22.04.0"$
